/**
 * Modules in this bundle
 * @license
 * 
 * glsl-bloom:
 * 
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
!function e(n,t,i){function r(a,u){if(!t[a]){if(!n[a]){var s="function"==typeof require&&require;if(!u&&s)return s(a,!0);if(o)return o(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=t[a]={exports:{}};n[a][0].call(l.exports,function(e){var t=n[a][1][e];return r(t?t:e)},l,l.exports,e,n,t,i)}return t[a].exports}for(var o="function"==typeof require&&require,a=0;a<i.length;a++)r(i[a]);return r}({1:[function(e,n,t){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}var r=e("./modules/bloom/bloom.js"),o=i(r),a=e("./modules/sphere.js"),u=i(a),s=document.getElementById("canvas-webgl"),c=new THREE.WebGLRenderer({antialias:!0,canvas:s,alpha:!0}),l=new THREE.WebGLRenderTarget(window.innerWidth,window.innerHeight),v=new THREE.Scene,f=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,1e4),d=new THREE.Clock,g=new Stats,m=new o["default"](l.texture),h=new u["default"],b=function(){s.width=window.innerWidth,s.height=window.innerHeight,f.aspect=window.innerWidth/window.innerHeight,f.updateProjectionMatrix(),c.setSize(window.innerWidth,window.innerHeight),l.setSize(window.innerWidth,window.innerHeight),m.resize()},x=function(){$(window).on("resize",function(){b()})},y=function(){var e=new dat.GUI,n=e.addFolder("bright"),t=e.addFolder("sphere"),i={blurCount:n.add(m,"blurCount",1,10).name("blur count").step(1),minBright:n.add(m.plane.bright,"minBright",0,1).name("min bright"),strength:n.add(m.plane.bloom,"strength",0,5).name("bright strength"),tone:n.add(m.plane.bloom,"tone",0,1).name("original tone"),colorHue:t.add(h,"hue",0,1).name("color hue")};i.minBright.onChange(function(e){m.plane.bright.uniforms.minBright.value=e}),i.strength.onChange(function(e){m.plane.bloom.uniforms.strength.value=e}),i.tone.onChange(function(e){m.plane.bloom.uniforms.tone.value=e}),i.colorHue.onChange(function(e){h.uniforms.hue.value=e}),n.open(),t.open()},w=function(){g.showPanel(0),document.body.appendChild(g.dom)},p=function(){h.render(d.getDelta()),c.render(v,f,l),m.render(c)},z=function P(){g.begin(),p(),g.end(),requestAnimationFrame(P)},E=function(){c.setSize(window.innerWidth,window.innerHeight),c.setClearColor(2236962,0),f.position.set(0,200,1e3),f.lookAt(new THREE.Vector3),v.add(h.mesh),x(),y(),w(),b(),z()};E(),setInterval(function(){},1)},{"./modules/bloom/bloom.js":2,"./modules/sphere.js":6}],2:[function(e,n,t){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}(),a=e("./plane_bright.js"),u=i(a),s=e("./plane_blur.js"),c=i(s),l=e("./plane_bloom.js"),v=i(l),f=function(){function e(n){r(this,e),this.blurCount=3,this.renderTarget=[new THREE.WebGLRenderTarget(window.innerWidth/4,window.innerHeight/4),new THREE.WebGLRenderTarget(window.innerWidth/4,window.innerHeight/4)],this.scene={bright:new THREE.Scene,blurh:new THREE.Scene,blurv:new THREE.Scene,bloom:new THREE.Scene},this.camera=new THREE.PerspectiveCamera(45,1,1,2),this.plane={bright:new u["default"](n),blurh:new c["default"](this.renderTarget[0].texture,new THREE.Vector2(1,0)),blurv:new c["default"](this.renderTarget[1].texture,new THREE.Vector2(0,1)),bloom:new v["default"](n,this.renderTarget[0].texture)},this.init()}return o(e,[{key:"init",value:function(){this.scene.bright.add(this.plane.bright.mesh),this.scene.blurh.add(this.plane.blurh.mesh),this.scene.blurv.add(this.plane.blurv.mesh),this.scene.bloom.add(this.plane.bloom.mesh)}},{key:"render",value:function(e){e.render(this.scene.bright,this.camera,this.renderTarget[0]);for(var n=0;n<this.blurCount;n++)e.render(this.scene.blurh,this.camera,this.renderTarget[1]),e.render(this.scene.blurv,this.camera,this.renderTarget[0]);e.render(this.scene.bloom,this.camera)}},{key:"resize",value:function(){this.renderTarget[0].setSize(window.innerWidth/4,window.innerHeight/4),this.renderTarget[1].setSize(window.innerWidth/4,window.innerHeight/4),this.plane.blurh.resize(),this.plane.blurv.resize()}}]),e}();t["default"]=f},{"./plane_bloom.js":3,"./plane_blur.js":4,"./plane_bright.js":5}],3:[function(e,n,t){"use strict";function i(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}(),o=function(){function e(n,t){i(this,e),this.uniforms=null,this.tone=.7,this.strength=3,this.texBase=n,this.texBlur=t,this.mesh=this.createMesh()}return r(e,[{key:"createMesh",value:function(){return this.uniforms={tone:{type:"f",value:this.tone},strength:{type:"f",value:this.strength},texBase:{type:"t",value:this.texBase},texBlur:{type:"t",value:this.texBlur}},new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main(void) {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n",fragmentShader:"#define GLSLIFY 1\nuniform float tone;\nuniform float strength;\nuniform sampler2D texBase;\nuniform sampler2D texBlur;\n\nvarying vec2 vUv;\n\nvoid main(void) {\n  gl_FragColor = texture2D(texBase, vUv) * tone + texture2D(texBlur, vUv) * strength;\n}\n"}))}}]),e}();t["default"]=o},{}],4:[function(e,n,t){"use strict";function i(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}(),o=function(){function e(n,t){i(this,e),this.uniforms=null,this.texture=n,this.direction=t,this.mesh=this.createMesh()}return r(e,[{key:"createMesh",value:function(){return this.uniforms={resolution:{type:"v2",value:new THREE.Vector2(window.innerWidth/10,window.innerHeight/10)},direction:{type:"v2",value:this.direction},texture:{type:"t",value:this.texture}},new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main(void) {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n",fragmentShader:"#define GLSLIFY 1\nuniform vec2 resolution;\nuniform vec2 direction;\nuniform sampler2D texture;\nuniform float weight[10];\n\nvarying vec2 vUv;\n\nvec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353) * direction;\n  vec2 off2 = vec2(3.2941176470588234) * direction;\n  vec2 off3 = vec2(5.176470588235294) * direction;\n  color += texture2D(image, uv) * 0.1964825501511404;\n  color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\n  color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\n  color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\n  color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\n  color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\n  color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\n  return color;\n}\n\nvec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.3846153846) * direction;\n  vec2 off2 = vec2(3.2307692308) * direction;\n  color += texture2D(image, uv) * 0.2270270270;\n  color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\n  color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\n  color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\n  color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\n  return color;\n}\n\nvec4 blur5(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.3333333333333333) * direction;\n  color += texture2D(image, uv) * 0.29411764705882354;\n  color += texture2D(image, uv + (off1 / resolution)) * 0.35294117647058826;\n  color += texture2D(image, uv - (off1 / resolution)) * 0.35294117647058826;\n  return color; \n}\n\nfloat gaussianPdf(in float x, in float sigma) {\n  return 0.39894 * exp( -0.5 * x * x/(sigma * sigma))/sigma;\n}\n\nvoid main(void) {\n  gl_FragColor = blur9(texture, vUv, resolution, direction);\n}\n"}))}},{key:"resize",value:function(){this.uniforms.resolution.value.set(window.innerWidth/10,window.innerHeight/10)}}]),e}();t["default"]=o},{}],5:[function(e,n,t){"use strict";function i(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}(),o=function(){function e(n){i(this,e),this.uniforms=null,this.minBright=.2,this.texture=n,this.mesh=this.createMesh()}return r(e,[{key:"createMesh",value:function(){return this.uniforms={minBright:{type:"f",value:this.minBright},texture:{type:"t",value:this.texture}},new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main(void) {\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n",fragmentShader:"#define GLSLIFY 1\nuniform float minBright;\nuniform sampler2D texture;\n\nvarying vec2 vUv;\n\nvoid main(void) {\n  vec4 bright = max(vec4(0.0), (texture2D(texture, vUv) - minBright));\n  gl_FragColor = bright;\n}\n"}))}}]),e}();t["default"]=o},{}],6:[function(e,n,t){"use strict";function i(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}(),o=function(){function e(){i(this,e),this.time=3,this.hue=.1,this.uniforms=null,this.mesh=this.createMesh(),this.setEvent()}return r(e,[{key:"createMesh",value:function(){return this.uniforms={time:{type:"f",value:0},hue:{type:"f",value:this.hue},cursor:{type:"v2",value:new THREE.Vector2((-.5),1)}},new THREE.Mesh(new THREE.OctahedronGeometry(240,7),new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:'#define GLSLIFY 1\nuniform float time;\nuniform float hue;\n\nvarying vec4 vColor;\nvarying vec4 vPosition;\nvarying mat4 vInvertMatrix;\n\nfloat inverse(float m) {\n  return 1.0 / m;\n}\n\nmat2 inverse(mat2 m) {\n  return mat2(m[1][1],-m[0][1],\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\n//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\nvec3 hsv2rgb(vec3 c){\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main(void) {\n  float noise1 = cnoise(\n      vec3(\n        position.x * 0.006 + time * 0.5,\n        position.y * 0.012,\n        position.z * 0.006\n      )\n    );\n  float noise2 = cnoise(\n      vec3(\n        position.x * 0.02,\n        position.y * 0.06,\n        position.z * 0.02 + time\n      )\n    );\n  vec4 noisePosition = vec4(position + (normalize(position) * (50.0 * noise1 + 10.0 * noise2)), 1.0);\n  vColor = vec4(hsv2rgb(vec3(hue, 0.65, 0.0 + (length(noisePosition) - 240.0) / 60.0)), 1.0);\n  vPosition = noisePosition;\n  vInvertMatrix = inverse(modelMatrix);\n  gl_Position = projectionMatrix * modelViewMatrix * noisePosition;\n}\n',fragmentShader:"#define GLSLIFY 1\nuniform vec2 cursor;\n\nvarying vec4 vColor;\nvarying vec4 vPosition;\nvarying mat4 vInvertMatrix;\n\nvoid main(void) {\n  vec3 normal = normalize(cross(dFdx(vPosition.xyz), dFdy(vPosition.xyz)));\n  vec3 inv_light = normalize(vInvertMatrix * vec4(vec3(cursor.x, cursor.y, 1.0 - abs(cursor.x)), 0.0)).xyz;\n  float diff = (dot(normal, inv_light) + 1.0) / 2.0;\n  vec3 light = vec3(0.4) * diff;\n  vec4 color = vColor;\n  gl_FragColor = color + vec4(light, 1.0);\n}\n",transparent:!0,side:THREE.DoubleSide,shading:THREE.FlatShading}))}},{key:"setEvent",value:function(){var e=this;document.getElementById("canvas-webgl").addEventListener("click",function(n){e.uniforms.cursor.value.set(n.clientX/window.innerWidth*2-1,(window.innerHeight-n.clientY)/window.innerHeight*2-1)})}},{key:"render",value:function(e){this.uniforms.time.value+=e*this.time}}]),e}();t["default"]=o},{}]},{},[1]);